# -*- coding: utf-8 -*-
"""Monte_Carlo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qk2g5Ip-ksrs80WH_JFqbms3Rl-79ZRT
"""

#Implement the Monte Carlo Method to simulate portfolio of top 5 AI stocks

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime as dt
from pandas_datareader import data as pdr
import yfinance as yf
yf.pdr_override()

#Import data
def get_data(stocks, start, end):
    stockData = pdr.get_data_yahoo(stocks, start, end)
    stockData = stockData['Close']
    returns = stockData.pct_change()
    meanReturns = returns.mean()
    covMatrix = returns.cov()
    return meanReturns, covMatrix

stockList = ['NVDA', 'AI', 'PANW','MSFT','GOOGL']
endDate = dt.datetime.now()
startDate = endDate - dt.timedelta(days=300)

meanReturns, covMatrix = get_data(stockList, startDate, endDate)

print(meanReturns)

weights = np.random.random(len(meanReturns))
weights /= np.sum(weights)

#Monte Carlo Method
#number of simulations
mc_sims = 100000
T = 100 #timeframe in days

meanM = np.full(shape=(T, len(weights)), fill_value=meanReturns)
meanM = meanM.T

portfolio_sims = np.full(shape=(T, mc_sims), fill_value=0.0)

initialPortfolio = 10000

for m in range (0, mc_sims):
    # MC loops
    Z = np.random.normal(size=(T, len(weights)))
    L = np.linalg.cholesky(covMatrix)
    dailyReturns = meanM + np.inner (L, Z)
    portfolio_sims[:,m] = np.cumprod(np.inner(weights, dailyReturns.T) + 1) * initialPortfolio

plt.plot(portfolio_sims)
plt.ylabel('Portfolio Value ($)')
plt.xlabel('Days')
plt.title('MC simulation of a stock portfolio')
plt.show()


def mcVaR(returns, alpha=5):
    #Input: pandas series of returns
    #Output: percentile on return distribution to a given confidence level alpha

    if isinstance(returns, pd.Series):
      return np.percentile(returns, alpha)
    else:
      raise TypeError("Expected a pandas data series.")

def mcCVaR(returns, alpha=5):
    #Input: pandas series of returns
    #Output: CVaR or Expected shortfall to a given confidence level alpha

    if isinstance(returns, pd.Series):
      belowVaR = returns <= mcVaR(returns, alpha=alpha)
      return returns[belowVaR].mean()
    else:
      raise AttributeError("Expected a pandas data series.")

portResults = pd.Series(portfolio_sims[-1, :])

VaR = initialPortfolio - mcVaR(portResults, alpha = 5)
CVaR = initialPortfolio - mcCVaR(portResults, alpha = 5)

print('VaR ${}'.format(round(VaR,2)))
print('CVaR ${}'.format(round(CVaR,2)))

